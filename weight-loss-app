# ******************************************************************************
# Author:           Shantai Green
# Lab:              Lab 7
# Date:             05/22/2023
# Description:      This program prompts a user for their name, their age,
#                   their current body weight in pounds,
#                   their goal body weight in pounds,
#                   and their height. It uses this information to
#                   decide if the user is the right age to use
#                   the program, if their goal matches the weight-loss intentions
#                   of the app, and if their goal is a healthy one.
#                   If the user is the right age and has a goal weight
#                   that is healthy and less than
#                   their starting weight, the program calculates
#                   and displays how much weight the user must lose to
#                   reach their chosen goal weight.
#                   The user may log their calories and predict their
#                   future weight loss.
# Input:            name (string), age (int), current weight (float),
#                   goal weight (float), food (string), calories (float)
#                   height (int)
# Output:           A sentence expressing the number of pounds the user
#                   must lose to reach their goal weight.
#                   A calorie log, a prediction of weight loss.
# Sources:          Lab 7 specifications
#                   Module 7
# ******************************************************************************

# ******************************************************************************
# Sample Run:
#
# Hi! Please enter your first name: Alice
#
# Welcome, Alice, to the first step of your weight-loss journey!
#
# This program is designed to help you lose weight.
# Not only will this program tell you how much weight you
# need to lose in order to reach your goal weight, it will also
# allow you to log your meals and even predict, based on your
# activity level and caloric intake, how far in the future you are likely
# to reach your goal weight!

# Before we begin, please enter your age: 25

# Choose your biological sex:
# 1. Female
# 2. Male
# Enter choice: 1
#
# Enter your current weight in pounds: 200
# Enter your goal weight in pounds: 150
# Enter your height in inches: 67
# Enter your biological sex (m/f): f
#
# Fantastic, Alice! You've chosen a healthy goal weight!

# 1. Sedentary
# 2. Light Exercise (1-2x/wk)
# 3. Moderate Exercise (3-5x/wk)
# 4. Heavy (6-7x/wk)
# 5. Athlete (2x/day)
# Choose your activity level: 3
#
# Alice, you will need to lose 50.0 lbs
# to reach your goal weight of 150.0 lbs.
#
# 1. Add food
# 2. Delete food
# 3. Print out log
# 4. Predict weight loss
# 5. Quit
# Enter your choice: 1
#
# 1. Breakfast
# 2. Lunch
# 3. Dinner
# 4. Snack
#
# Enter meal choice: 2
# Enter meal choice: 2
# Enter food: salad
# Enter calories: 300
# ['salad'] [300.0] ['Lunch']
#
# 1. Add food
# 2. Delete food
# 3. Print out log
# 4. Predict weight loss
# 5. Quit
# Enter your choice: 3

# Food                Cals           Meal
# _________________   __________     __________
# salad               300.0          Lunch
#
# Today's total intake: 300.0 calories.

# 1. Add food
# 2. Delete food
# 3. Print out log
# 4. Predict weight loss
# 5. Quit
# Enter your choice: 5
#
#
# Thanks for choosing to take care of your health, Alice!
# ******************************************************************************

# import modules
import valid as v

# Declares the global constants
CM_CONVERSION_RATE = 2.54
KG_CONVERSION_RATE = 1 / 2.20462
CAL_LBS_CONVERSION_RATE = 1 / 3500
DAYS_IN_MTH = 30


# Defines the main function sequentially
def main():
    name = ''
    current_weight = 0.0
    goal_weight = 0.0
    pounds_to_lose = 0.0
    height = 0.0
    kg_weight = 0.0
    cm_height = 0.0
    goal_bmi = 0.0
    age = 0
    user_bmr = 0.0
    user_activity_level = 0
    user_tdee = 0.0
    daily_cal_diff = 0.0
    monthly_cal_diff = 0.0
    monthly_lbs = 0.0
    sex = ''
    go = ''
    food_array = []
    calories_array = []
    meal_array = []

    # This section gets the user's starting info
    name = get_name()
    print_welcome(name)
    print_purpose()
    age = get_age()
    sex = get_user_sex()
    current_weight = get_current_weight()
    goal_weight = get_goal_weight(current_weight)
    height = get_height()

    # This subsection determines whether the goal is healthy
    go = 'Y'
    while go == 'Y':
        goal_bmi = calculate_goal_bmi(goal_weight, height)
        # validates goal bmi
        go = check_goal_bmi(goal_bmi, name)
        if go == 'Y':
            goal_weight = get_goal_weight(current_weight)

    # Continue to get user information
    print_activity_levels()
    user_activity_level = get_activity_level()
    kg_weight = convert_value(current_weight, KG_CONVERSION_RATE)
    cm_height = convert_value(height, CM_CONVERSION_RATE)
    user_bmr = calculate_bmr(sex, kg_weight, cm_height, age)
    user_tdee = calculate_tdee(user_activity_level, user_bmr)

    # Calculates lbs to lose
    pounds_to_lose = calculate_lbs_to_lose(current_weight, goal_weight)
    print_lbs_to_lose(name, pounds_to_lose, goal_weight)

    # begin next section of program
    go = True
    while go:
        print_menu()
        choice = get_choice()

        # add food to log
        if choice == 1:
            add_food(food_array, calories_array, meal_array)
            print(food_array, calories_array, meal_array)

        # remove food from log
        elif choice == 2:
            delete_from_arrays(food_array, calories_array, meal_array)
            print(food_array, calories_array, meal_array)

        # print out log with summary
        elif choice == 3:
            print_out_arrays(food_array, calories_array, meal_array)
            total_day_cals = calculate_total_cal(calories_array)
            print_total_cal(total_day_cals)

        # predict weight loss
        elif choice == 4:
            total_day_cals = calculate_total_cal(calories_array)
            if total_day_cals == 0:
                print("No calories have been logged today.")
                print("Please log your calories to predict your weight loss")
            elif total_day_cals > 0:
                daily_cal_diff = calculate_cal_diff(total_day_cals, user_tdee)
                monthly_cal_diff = convert_value(daily_cal_diff, DAYS_IN_MTH)
                monthly_lbs = convert_value(monthly_cal_diff, CAL_LBS_CONVERSION_RATE)
                monthly_lbs = round(monthly_lbs, 2)
                if monthly_lbs > 0:
                    print(f"{name}, if you keep eating like this, you will gain weight.")
                    print(f"At this rate, you may gain {monthly_lbs} lbs each month.")
                elif monthly_lbs == 0:
                    print(f"{name}, you're currently in maintenance mode. No loss. No gain.")
                elif monthly_lbs < 0:
                    monthly_lbs = make_pos_or_neg(monthly_lbs)
                    print(f"{name}, you're eating to lose weight!")
                    print(f"At this rate, you may lose {monthly_lbs} lbs each month.")

        # quit program
        elif choice == 5:
            go = False

    # End of program
    print_goodbye(name)


# Defines the input functions

def get_name(prompt="Hi! Please enter your first name: "):
    """
    Prompts the user to enter their name
    :param: none
    :return: string, user's name
    """
    is_valid = False
    name = input(prompt)
    is_valid = name.isalpha()
    while not is_valid:
        print("Invalid name.")
        name = input(prompt)
        is_valid = name.isalpha()
    return name


def get_current_weight():
    """
    Prompts the user to enter their current weight in lbs
    and validates the input for type and reasonableness
    :param: none
    :return: float, user's current weight
    """
    current_weight = 0.0
    current_weight = v.get_real("\nEnter your current weight "
                                "in pounds: ")
    while current_weight < 60 or current_weight > 700:
        print("Invalid weight.")
        current_weight = v.get_real("\nEnter your current weight "
                                    "in pounds: ")
    return current_weight


def get_goal_weight(current_weight):
    """
    Prompts the user to enter their goal weight in lbs,
    validating for type and reasonableness of goal weight
    :param current_weight: float, user's current weight
    :return: float, user's goal weight
    """
    goal_weight = 0.0
    answer = ""
    is_alpha = False
    is_y_or_n = False
    goal_weight = v.get_real("Enter your goal weight in pounds: ")
    while goal_weight < 0:
        print("\nInvalid goal weight.\nLet's try again.")
        goal_weight = v.get_real("Enter your REAL goal weight in pounds: ")
    # checks for the reasonableness of the goal weight
    while goal_weight >= current_weight:
        if goal_weight > current_weight:
            print("\nThis is a weight-loss app, not a weight-gain app. "
                  "Please bulk elsewhere, friend.\n")
        else:
            print("\nYou're currently at your goal weight. Congrats!\n")
        # now we will ask if the user would like to reenter their gw
        answer = input("Would you like to reenter your goal weight? (Y/N): ")
        answer = answer.upper()
        # validates that the answer is alphabetic
        is_alpha = answer.isalpha()
        if answer == 'Y' or answer == 'N':
            is_y_or_n = True
        # validates that the answer is reasonable
        while not (is_alpha or not is_y_or_n):
            print("Invalid answer. (Y/N): ")
            answer = input("Would you like to reenter "
                           "your goal weight? (Y/N): ")
        if answer == 'Y':
            print("\nGreat!")
            goal_weight = v.get_real("Enter your goal weight in pounds: ")
        else:
            print('No problem!\nGoodbye!')
            exit()
    return goal_weight


def get_height():
    """
    Prompts the user to enter their height in inches
    :param: none
    :return: none
    """
    height = 0
    height = v.get_real("Enter your height in inches: ")
    # i tried to account for dwarfism and gigantism
    while height < 48.0 or height > 96.0:
        print("Invalid input.")
        height = v.get_real("Enter your height in inches: ")
    return height


def get_user_sex():
    """
    Prompts the user to choose their
    biological sex from list of options
    :return: str, user sex
    """
    user_sex = ""
    choice = 0
    print("\nChoose your biological sex:"
          "\n1. Female"
          "\n2. Male")
    choice = v.get_integer("Enter choice: ")
    while choice < 1 or choice > 2:
        print("Invalid choice.")
        choice = v.get_integer("Enter choice: ")
    if choice == 1:
        user_sex = "f"
    elif choice == 2:
        user_sex = "m"
    return user_sex


def get_activity_level():
    choice = 0
    choice = v.get_integer("Choose your activity level: ")
    while choice < 1 or choice > 5:
        print("Invalid choice.")
        choice = v.get_integer("Choose your activity level: ")
    return choice


def get_choice():
    """
    Prompts the user to enter a number
    :return: int, chosen number
    """
    choice = 0
    choice = v.get_integer("Enter your choice: ")
    while choice < 1 or choice > 5:
        print("Invalid choice.")
        choice = v.get_integer("Enter your choice: ")
    return choice


def add_food(f_arr, c_arr, m_arr):
    """
    Enacts the full process of adding to
    and updating the parallel arrays
    :param f_arr: array, food list
    :param c_arr: array, calorie list
    :param m_arr: array, meal list
    :return: none
    """
    food = ""
    cals = 0.0
    meal = ""
    print_meal_choices()
    meal = get_meal()
    food = get_food_name()
    cals = get_cal_count()
    add_to_arrays(food, cals, meal,
                  f_arr, c_arr, m_arr)


def get_meal():
    """
    Determines the meal that the user is logging
    :return: str, the meal
    """
    meal_choice = 0
    meal_choice = v.get_integer("Enter meal choice: ")
    while meal_choice < 1 or meal_choice > 4:
        print("Invalid choice.")
        meal_choice = v.get_integer("Enter meal choice: ")
    if meal_choice == 1:
        meal = "Breakfast"
    elif meal_choice == 2:
        meal = "Lunch"
    elif meal_choice == 3:
        meal = "Dinner"
    elif meal_choice == 4:
        meal = "Snack"
    return meal


def get_food_name():
    """
    Prompts user to enter
    the name of food to be logged
    :return: str, name of food
    """
    food_name = ""
    food_name = v.get_string("Enter food: ")
    return food_name


def get_cal_count():
    """
    Prompts user to enter calories to log
    :return: float, calories entered
    """
    calories = 0.0
    calories = v.get_real("Enter calories: ")
    while calories < 0:
        print("Invalid entry.")
        calories = v.get_real("Enter calories: ")
    return calories


def check_goal_bmi(goal_bmi, name):
    """
     Checks to see if the user's BMI at their goal weight
     is a healthy choice or not
     :param name: string, the user's name
     :param goal_bmi: float, the user's BMI at goal weight
     :return: str, the user's answer regarding
     reentering goal weight
     """
    go = ''
    go = 'N'
    if goal_bmi < 18.5:
        print(f"\nI'm sorry, {name}. Your goal weight is too "
              f"low for your height.\n")
    elif goal_bmi > 24.9:
        print(f"\nI'm sorry, {name}. Your goal weight is too "
              f"high for your height.\n")
    else:
        print(f"\nFantastic, {name}! You've chosen "
              f"a healthy goal weight!")
    if goal_bmi < 18.5 or goal_bmi > 24.9:
        go = v.get_y_or_n("Would you like to enter a "
                          "healthier goal weight? (Y/N) ").upper()
        if go == 'N':
            print(f"No problem, {name}!\nGoodbye!")
            exit()
    return go


def get_age():
    """
    Prompts the use to enter their age
    and validates the type, range, and
    reasonableness of the input
    :return: int, the user's age
    """
    user_age = 0
    user_age = v.get_integer("\nBefore we begin, please enter your age: ")
    # check that it's a positive number
    while user_age <= 0 or user_age > 120:
        print("\nLet's try again.")
        user_age = v.get_integer("\nPlease enter your REAL age: ")
    if user_age < 18:
        print(f"\nI'm sorry, but you'll have to wait "
              f"{18 - user_age} years to use this app.\nGoodbye!")
        exit()
    elif user_age > 91:
        print(f"\nWhile you've accomplished many things "
              f"in your {user_age} years, using this app "
              f"just won't be one of them.\nGoodbye!")
        exit()
    return user_age


# Defines the process functions


def make_pos_or_neg(number):
    number *= -1
    return number

def convert_value(initial_val, conversion_rate):
    """
    This function converts measurements
    :param initial_val: value to be converted
    :param conversion_rate: rate of conversion
    :return: float, converted value
    """
    converted_val = 0.0
    converted_val = initial_val * conversion_rate
    return converted_val


def calculate_lbs_to_lose(current_weight, goal_weight):
    """
    Calculates how much weight in pounds the user
    must lose to reach their goal weight
    :param current_weight: float, user's current weight
    :param goal_weight: float, user's goal weight
    :return: float, how many pounds the user must lose
    to reach their goal weight
    """
    pounds_to_lose = 0.0
    pounds_to_lose = current_weight - goal_weight
    return pounds_to_lose


def calculate_goal_bmi(goal_weight, height):
    """
    Calculate's the BMI for the user's goal weight
    :param goal_weight: int, user's goal weight
    :param height: int, user's height
    :return: float, user's body mass index
    """
    bmi = 0.0
    bmi = goal_weight / height ** 2 * 703
    return bmi


def calculate_cal_diff(total_cal, tdee):
    """
    Calculates the difference between the daily
    caloric input and output
    based on the calorie log
    :param total_cal: float, caloric input
    :param tdee: float, caloric output
    :return: float, the difference between
    caloric input and caloric output
    """
    cal_diff = 0.0
    cal_diff = total_cal - tdee
    return cal_diff


def calculate_tdee(activity_lev, bmr):
    """
    Calculates the avg daily calorie burn of
    the user based on their bmr and activity level
    :param activity_lev: int, user's activity level
    :param bmr: float, user's bmr
    :return: float, the avg daily calorie burn
    """
    tdee = 0.0
    if activity_lev == 1:
        tdee = bmr * 1.2
    elif activity_lev == 2:
        tdee = bmr * 1.375
    elif activity_lev == 3:
        tdee = bmr * 1.55
    elif activity_lev == 4:
        tdee = bmr * 1.725
    elif activity_lev == 5:
        tdee = bmr * 1.9
    return tdee


def add_to_arrays(food, cal, meal, food_arr, cal_arr, meal_arr):
    """
    Updates the relevant parallel arrays
    :param food: str, name of food
    :param cal: float, caloric amount
    :param meal: str, the meal of day for intake
    :param food_arr: array, the list of foods
    :param cal_arr: array, the list of calories
    :param meal_arr: array, the list of meals
    :return: none
    """
    food_arr.append(food)
    cal_arr.append(cal)
    meal_arr.append(meal)


def delete_from_arrays(food_arr, cal_arr, meal_arr):
    """
    Prompts the user to enter the food to be deleted
    and deletes the record for it from all three arrays
    :param food_arr: array, food list
    :param cal_arr: array, calorie list
    :param meal_arr: array, meal list
    :return: none
    """
    food = ""
    food_index = 0
    in_array = False
    food = v.get_string("Enter food name: ")
    for i in range(len(food_arr)):
        if food_arr[i].lower() == food.lower():
            in_array = True
            food_arr.pop(i)
            cal_arr.pop(i)
            meal_arr.pop(i)
            print(f"{food.capitalize()} has been removed.")
            break
    if not in_array:
        print(f"\n{food.capitalize()} is not in log.")
        print("Deletion not possible.")


def calculate_total_cal(cal_arr):
    """
    Takes an array of values and
    returns the sum
    :param cal_arr: array of calories (floats)
    :return: float, the sum of the array's values
    """
    total_cal = 0.0
    for val in cal_arr:
        total_cal += val
    return total_cal


def calculate_bmr(sex, weight, height, age):
    """
    Calculates the amount of calories the user's body
    burns daily at complete rest
    :param sex: str, user's bio sex
    :param weight: float, user's current weight in kg
    :param height: float, user's height in cm
    :param age: int, user's current age
    :return: float, daily cals the user's body burns at rest
    """
    bmr = 0.0
    if sex == "m":
        bmr = 88.362 + 13.397 * weight + 4.799 * height - 5.677 * age
    elif sex == "f":
        bmr = 447.593 + 9.247 * weight + 3.098 * height - 4.330 * age
    return bmr


# Defines the output functions

def print_welcome(name="Inigo Montoya"):
    """
    Prints a welcome message with user's name
    :param name: string, user's name
    :return: none
    """
    print(f"\nWelcome, {name}, to the first step "
          f"of your weight-loss journey!")


def print_purpose():
    """
    Prints the purpose of the program
    :param: none
    :return: none
    """
    print("\nThis program is designed to help you lose weight."
          "\nNot only will this program tell you how much weight you"
          "\nneed to lose in order to reach your goal weight, "
          "\nit will also allow you to log your meals and even predict, "
          "based on your activity level and caloric intake, "
          "\nhow much weight you're likely to lose in a month.")


def print_lbs_to_lose(name, pounds_to_lose, goal_weight):
    """
    Prints a message with the user's name that
    details how much weight the user must lose
    in order to reach their goal weight
    :param name: string, user's name
    :param pounds_to_lose: float, pounds left to lose
    :param goal_weight: float, user's goal weight
    :return: none
    """
    print(f"\n{name}, you will need to lose {pounds_to_lose} lbs "
          f"to reach your goal weight of {goal_weight} lbs.")


def print_activity_levels():
    """
    Prints activity level options for TDEE
    :return: none
    """
    print("\n1. Sedentary"
          "\n2. Light Exercise (1-2x/wk)"
          "\n3. Moderate Exercise (3-5x/wk)"
          "\n4. Heavy (6-7x/wk)"
          "\n5. Athlete (2x/day)\n")


def print_menu():
    """
    Prints the menu of options
    :return: none
    """
    print("\n1. Add food"
          "\n2. Delete food"
          "\n3. Print out log"
          "\n4. Predict weight loss"
          "\n5. Quit\n")


def print_meal_choices():
    """
    Prints out the available meals to log
    :return: none
    """
    print("\n1. Breakfast"
          "\n2. Lunch"
          "\n3. Dinner"
          "\n4. Snack\n")


def print_out_arrays(f_arr, c_arr, m_arr):
    """
    Prints out the full calorie log
    in a readable format
    :param f_arr: array, food list
    :param c_arr: array, calorie list
    :param m_arr: array, meal list
    :return:
    """
    print()
    print("{: <20}{: <15}{: <20}".format("Food", "Cals", "Meal"))
    print("{: <20}{: <15}{: <20}".format("_________________",
                                         "__________", "__________"))
    for i in range(len(f_arr)):
        print("{: <20}{: <15}{: <20}".format(f_arr[i], c_arr[i], m_arr[i]))


def print_total_cal(tot_cal):
    """
    Prints out the user's total caloric intake for the day
    :param tot_cal: float, total calories
    :return: none
    """
    print(f"\nToday's total intake: {tot_cal} calories.")


def print_goodbye(user_name):
    """
    Prints out a personalized goodbye to the user
    :param user_name:
    :return:
    """
    print(f'\nThanks for choosing to take care of your health, {user_name}!')


# Executes the program
main()
